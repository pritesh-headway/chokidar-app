http://192.168.x.xx

http://192.168.1.16:8000

Temperory Bearer token will be given upon login like this:
Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTkyLjE2OC4xLjE2OjgwMDAvYXBpL2xvZ2luIiwiaWF0IjoxNzM3MDA4MDI1LCJleHAiOjE3MzcwMTE2MjUsIm5iZiI6MTczNzAwODAyNSwianRpIjoiWGtBWnhrWlJmZFQ3aEkzdiIsInN1YiI6IjkiLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.v2WsD-ypwVsntOK9eyKKTPkmyq0ZGU7iTSpo9JXFCus

login detail:
http://192.168.1.16:8000/api/login
{
    "email":"root@root.com",
    "password":"root1234"
}

Users CRUD

GET /api/user?id=all -> all Users
GET /api/user?id={id} -> 1 user with id {id}.
POST /api/user with body json -> create user
POST /api/user/{id} with only key-values to be updated -> update user of id {id}
DELETE /api/user/{id} -> delete user with id {id}
Family CRUD

GET /api/family?id=all -> all family (user id)
GET /api/family?id={id} -> family members  with user id {id}.
POST /api/family?id={id} with body json -> create family with user id {id} (user with {id} must be present)
POST /api/family/{id} with only key-values to be updated -> update family of id {id} (not user id)
DELETE /api/family/{id} -> delete family with id {id} (not user id)
Visitors CRUD

GET /api/visitor?id=all -> All visitors (you can filter or paginate if needed).
GET /api/visitor?id={id} -> Retrieve a specific visitor by {id}.
POST /api/visitor with body JSON -> Create a new visitor.
POST /api/visitor/{id} with only key-value pairs to be updated -> Update visitor with {id}.
DELETE /api/visitor/{id} -> Delete visitor with {id}.

Notices CRUD

GET /api/notice?id=all -> Get all notices.
GET /api/notice?id={id} -> Retrieve a specific notice by {id}.
POST /api/notice with body JSON -> Create a new notice.
POST /api/notice/{id} with only key-value pairs to be updated -> Update notice with {id}.
DELETE /api/notice/{id} -> Delete notice with {id}.
Vehicles CRUD

GET /api/vehicle?id=all -> All vehicles.
GET /api/vehicle?id={id} -> Vehicles for user with user id {id}.(will contain all the vehicles with user {id})
POST /api/vehicle with body JSON -> Create a vehicle for user id (block_number auto-fetched).
POST /api/vehicle/{id} with only key-value pairs to be updated -> Update vehicle with id {id}.
DELETE /api/vehicle/{id} -> Delete vehicle with id {id}.

Maintenance CRUD Notes (Condensed):

GET /api/maintenance?id=all -> All maintenance records.
GET /api/maintenance?id={id} -> Maintenance records for user with user id {id}.
GET /api/maintenance/{id} -> Retrieve a specific maintenance record by {id}.
POST /api/maintenance with body JSON -> Create a new maintenance record (owner_name auto-fetched).
POST /api/maintenance/{id} with only key-value pairs to be updated -> Update maintenance record with id {id}.
DELETE /api/maintenance/{id} -> Delete maintenance record with id {id}.

Complaint CRUD Notes (Condensed):

GET /api/complaint?id=all -> All complaints records.
GET /api/complaint?id={id} -> Complaint records for user with user id {id}.
GET /api/complaint/{id} -> Retrieve a specific complaint record by {id}.
POST /api/complaint with body JSON -> Create a new complaint record.
POST /api/complaint/{id} with only key-value pairs to be updated -> Update complaint record with id {id}.
DELETE /api/complaint/{id} -> Delete complaint record with id {id}.
Security CRUD Notes (Condensed):

GET /api/security?id=all -> Retrieve all security records.
GET /api/security?id={id} -> Retrieve security records by specific id.
GET /api/security/{id} -> Retrieve a specific security record by id.
POST /api/security -> Create a new security record (status defaults to deactive if not provided).
POST /api/security/{id} -> Update an existing security record with given id and provided fields.
DELETE /api/security/{id} -> Delete a specific security record by id.
Forum CRUD

GET /api/forums?id=all -> Get all forums
GET /api/forums?id={id} -> Get forum with id {id}
POST /api/forums with body JSON -> Create a new forum
POST /api/forums/{id} with key-values to update -> Update forum with id {id}
DELETE /api/forums/{id} -> Delete forum with id {id}
Responses CRUD

GET /api/responses?id=all -> Get all responses
GET /api/responses?id={id} -> Get responses for forum with id {id}
POST /api/responses with body JSON -> Create a new response (requires forum_id)
POST /api/responses/{id} with key-values to update -> Update response with id {id}
DELETE /api/responses/{id} -> Delete response with id {id}

---

/table/{id} -> accessing table 1 element using table's id
/table?id={id} -> accessing multiple elements of table using user_id
DB::table('users')->update(['profile_photo' => 'profile_photos/avatar.png']);

DB::table('visitors')->update(['prof_image' => 'profile_photos/avatar.png']);

DB::table('visitors')->update(['prof_image' => 'profile_photos/avatar.png']);

DB::table('notices')->update(['society_id' => rand(1,3)]);

DB::table('roles')->get()->each(function($role) { DB::table('roles')->where('id', $role->id)->update(['society_id' => rand(1, 3)]); });

DB::table('maintenance')->update(['photo' => 'profile_photos/avatar.png']);

DB::table('gate_details')->update(['society_id' => 2]);
php artisan config:clear
php artisan config:cache

php artisan route:clear
php artisan cache:clear
php artisan config:clear

php artisan config:clear
php artisan cache:clear
php artisan route:clear
php artisan view:clear
booking amenity particular
'no' => $index + 1,
status:
message:
data:
{
    {
        id:
        no:

         securityImage: null,
            guardName: '',
            personalNumber: '',
            address: '',
            gateContactNumber: '',
            documents: [],
    }
}
status:
message:
data:
{
    {
        role:"Chairman",
    rows: [
        {
            "no": 1,
            "id": 1,
            "role": "Chairman",
            "user_id": 5,
            "profile_image": "http://192.168.1.17/chokidar-app/public/storage/profile_photos/avatar.png",
            "mobile": "8831529632",
            "block_number": "Z-859",
           "member_name": concatinated first and last name,

        },
        {
            "no": 2,
            "id": 2,
            "role": "Representative",
            "user_id": 11,
            "profile_image": "http://192.168.1.17/chokidar-app/public/storage/profile_photos/avatar.png",
            "mobile": "4070046876",
            "block_number": "K-347",
             "member_name": concatinated first and last name,
        },
        {
    ]
    }
}
family member details : role diff from users member
images sometimes it does not load .
'service_name' => $this->faker->randomeElement(['Security', 'Cleaner', 'Gardener', 'Electrician', 'Plumber', 'Maid', 'Iron Press', 'Milk man', 'Baby Caretaker']),
now make service_requests table migrations, model, factory, seeder, controller, routes(all should be posts not get put delete and parameters like id should be in input not query)

id	member_id	service_id	provider_id	request_status	status	created_at	updated_at
INT	INT(foreign key from users table)	INT(foreign key from services table)	INT(foreign key from providers table)	ENUM ('pending'(default), 'completed', 'cancelled')	ENUM(active (default) , deactive)	TIMESTAMP	TIMESTAMP

this table contains which member is containing which services of which providers with request status
amenity description
guard image not working first time
role_name , role -> role members table CRUD
messages conversations api postman

contact us api
super admin.

- in services(all) and chat(all) avoid duplicate creation.
- login 405 and token expiry

messages update problem and doubt.
notices url change
recheck all files with factory and other things after society_id dynamic.
use App\Models\User;
use Spatie\Permission\Models\Role;

$user = User::find(247);
$user->assignRole('super-admin');

$user = User::find(241);
$user->assignRole('admin');
use App\Models\User;
use Spatie\Permission\Models\Role;
$role = Role::firstOrCreate(['name' => 'super-admin']);
$adminRole = Role::firstOrCreate(['name' => 'admin']);
$user = User::find(241);
$user->assignRole($role);

$user2 = User::find(247);
$user2->assignRole($adminRole);
city state postal_code contact_number type status
register() method,
registersociety form add users inputs

houses controller for web supre admin
houses / views and user detaisl in society view section

wget --recursive --no-clobber --page-requisites --html-extension --convert-links --restrict-file-names=windows --domains website.org --no-parent  wget --recursive --no-clobber --page-requisites --html-extension --convert-links --restrict-file-names=windows --domains website.org --no-parent wget --recursive --no-clobber --page-requisites --html-extension --convert-links --restrict-file-names=windows --domains website.org --no-parent  https://uiparadox.co.uk/public/templates/astro-aura/
wget --mirror --convert-links --adjust-extension --page-requisites  --no-parent https://uiparadox.co.uk/public/templates/astro-aura/
















<div class="row">
            <div class="col-xl-3 col-lg-6 col-md-12 col-12 mt-6">
                <!-- card -->
                <div class="card ">
                    <!-- card body -->
                    <div class="card-body">
                        <!-- heading -->
                        <div class="d-flex justify-content-between align-items-center
                mb-3">
                            <div>
                                <h4 class="mb-0">Calculate Data</h4>
                            </div>
                            <div class="icon-shape icon-md bg-light-primary text-primary
                  rounded-2">
                                <i class="bi bi-briefcase fs-4"></i>
                            </div>
                        </div>
                        <!-- project number -->
                        <div>
                            <h1 class="fw-bold">0</h1>
                            <p class="mb-0">
                                <span class="text-dark me-2"><button class="btn btn-info" data-bs-toggle="modal"
                                        data-bs-target="#calculateModal">Details</button></span>
                                <span class="text-dark me-8"></span>

                                {{-- <span class="text-dark me-2"><button class="btn btn-primary">Details</button></span>
                            --}}
                            </p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-lg-6 col-md-12 col-12 mt-6">
                <!-- card -->
                <div class="card ">
                    <!-- card body -->
                    <div class="card-body">
                        <!-- heading -->
                        <div class="d-flex justify-content-between align-items-center
                mb-3">
                            <div>
                                <h4 class="mb-0">View Data</h4>
                            </div>
                            <div class="icon-shape icon-md bg-light-primary text-primary
                  rounded-2">
                                <i class="bi bi-list-task fs-4"></i>
                            </div>
                        </div>
                        <!-- project number -->
                        <div>
                            <h1 class="fw-bold">0</h1>
                            <p class="mb-0">
                                {{-- <span class="text-dark me-2"><button class="btn btn-info">Details</button></span> --}}
                                <span class="text-dark me-8"></span>

                                <span class="text-dark me-2"><button class="btn btn-primary" data-bs-toggle="modal"
                                        data-bs-target="#viewModal">Details</button></span>
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-lg-6 col-md-12 col-12 mt-6">
                <!-- card -->
                <div class="card ">
                    <!-- card body -->
                    <div class="card-body">
                        <!-- heading -->
                        <div class="d-flex justify-content-between align-items-center
                mb-3">
                            <div>
                                <h4 class="mb-0">Add Data</h4>
                            </div>
                            <div class="icon-shape icon-md bg-light-primary text-primary
                  rounded-2">
                                <i class="bi bi-people fs-4"></i>
                            </div>
                        </div>
                        <!-- project number -->
                        <div>
                            <h1 class="fw-bold">0</h1>
                            <p class="mb-0">

                                <span class="text-dark me-8"></span>

                                <span class="text-dark me-2"><button class="btn btn-primary" data-bs-toggle="modal"
                                        data-bs-target="#addFormModal">Add</button></span>
                            </p>
                        </div>
                    </div>
                </div>

            </div>
            <div class="col-xl-3 col-lg-6 col-md-12 col-12 mt-6">
                <!-- card -->
                <div class="card ">
                    <!-- card body -->
                    <div class="card-body">
                        <!-- heading -->
                        <div class="d-flex justify-content-between align-items-center
                mb-3">
                            <div>
                                <h4 class="mb-0">Settings</h4>
                            </div>
                            <div class="icon-shape icon-md bg-light-primary text-primary
                  rounded-2">
                                <i class="bi bi-bullseye fs-4"></i>
                            </div>
                        </div>
                        <!-- project number -->
                        <div>
                            <h1 class="fw-bold">0</h1>
                            <p class="mb-0">
                                <span class="text-dark me-12"></span>

                                <span class="text-dark me-2"><a href="#"><button class="btn btn-primary">Go To Setting
                                            Screens</button>
                                    </a></span>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>


npm install --save-dev laravel-echo pusher-js && npm run build
